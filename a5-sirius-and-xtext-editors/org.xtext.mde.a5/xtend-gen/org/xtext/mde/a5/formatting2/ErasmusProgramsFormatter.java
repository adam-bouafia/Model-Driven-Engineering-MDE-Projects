/**
 * generated by Xtext 2.33.0
 */
package org.xtext.mde.a5.formatting2;

import a3_Erasmo_Stanco_Group.AdmissionStructure;
import a3_Erasmo_Stanco_Group.AssociatePartner;
import a3_Erasmo_Stanco_Group.Course;
import a3_Erasmo_Stanco_Group.ErasmusProgram;
import a3_Erasmo_Stanco_Group.Location;
import a3_Erasmo_Stanco_Group.Scholarship;
import a3_Erasmo_Stanco_Group.University;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.mde.a5.services.ErasmusProgramsGrammarAccess;

@SuppressWarnings("all")
public class ErasmusProgramsFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private ErasmusProgramsGrammarAccess _erasmusProgramsGrammarAccess;

  protected void _format(final ErasmusProgram erasmusProgram, @Extension final IFormattableDocument document) {
    EList<University> _universities = erasmusProgram.getUniversities();
    for (final University university : _universities) {
      document.<University>format(university);
    }
    EList<Scholarship> _scholarships = erasmusProgram.getScholarships();
    for (final Scholarship scholarship : _scholarships) {
      document.<Scholarship>format(scholarship);
    }
    EList<AssociatePartner> _associatePartners = erasmusProgram.getAssociatePartners();
    for (final AssociatePartner associatePartner : _associatePartners) {
      document.<AssociatePartner>format(associatePartner);
    }
    document.<AdmissionStructure>format(erasmusProgram.getAdmissionStructure());
  }

  protected void _format(final University university, @Extension final IFormattableDocument document) {
    document.<Location>format(university.getLocation());
    EList<Course> _courses = university.getCourses();
    for (final Course course : _courses) {
      document.<Course>format(course);
    }
  }

  public void format(final Object erasmusProgram, final IFormattableDocument document) {
    if (erasmusProgram instanceof XtextResource) {
      _format((XtextResource)erasmusProgram, document);
      return;
    } else if (erasmusProgram instanceof ErasmusProgram) {
      _format((ErasmusProgram)erasmusProgram, document);
      return;
    } else if (erasmusProgram instanceof University) {
      _format((University)erasmusProgram, document);
      return;
    } else if (erasmusProgram instanceof EObject) {
      _format((EObject)erasmusProgram, document);
      return;
    } else if (erasmusProgram == null) {
      _format((Void)null, document);
      return;
    } else if (erasmusProgram != null) {
      _format(erasmusProgram, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(erasmusProgram, document).toString());
    }
  }
}
