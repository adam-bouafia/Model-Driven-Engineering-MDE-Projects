/*
 * generated by Xtext 2.33.0
 */
package org.xtext.mde.a5.serializer;

import a3_Erasmo_Stanco_Group.A3_Erasmo_Stanco_GroupPackage;
import a3_Erasmo_Stanco_Group.AdmissionStructure;
import a3_Erasmo_Stanco_Group.ApplicationProcess;
import a3_Erasmo_Stanco_Group.AssociatePartner;
import a3_Erasmo_Stanco_Group.Course;
import a3_Erasmo_Stanco_Group.DegreeRequirement;
import a3_Erasmo_Stanco_Group.DocumentRequirement;
import a3_Erasmo_Stanco_Group.ErasmusProgram;
import a3_Erasmo_Stanco_Group.LanguageRequirement;
import a3_Erasmo_Stanco_Group.Location;
import a3_Erasmo_Stanco_Group.Results;
import a3_Erasmo_Stanco_Group.Scholarship;
import a3_Erasmo_Stanco_Group.Step;
import a3_Erasmo_Stanco_Group.University;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.mde.a5.services.ErasmusProgramsGrammarAccess;

@SuppressWarnings("all")
public class ErasmusProgramsSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ErasmusProgramsGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == A3_Erasmo_Stanco_GroupPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case A3_Erasmo_Stanco_GroupPackage.ADMISSION_STRUCTURE:
				sequence_AdmissionStructure(context, (AdmissionStructure) semanticObject); 
				return; 
			case A3_Erasmo_Stanco_GroupPackage.APPLICATION_PROCESS:
				sequence_ApplicationProcess(context, (ApplicationProcess) semanticObject); 
				return; 
			case A3_Erasmo_Stanco_GroupPackage.ASSOCIATE_PARTNER:
				sequence_AssociatePartner(context, (AssociatePartner) semanticObject); 
				return; 
			case A3_Erasmo_Stanco_GroupPackage.COURSE:
				sequence_Course(context, (Course) semanticObject); 
				return; 
			case A3_Erasmo_Stanco_GroupPackage.DEGREE_REQUIREMENT:
				sequence_DegreeRequirement(context, (DegreeRequirement) semanticObject); 
				return; 
			case A3_Erasmo_Stanco_GroupPackage.DOCUMENT_REQUIREMENT:
				sequence_DocumentRequirement(context, (DocumentRequirement) semanticObject); 
				return; 
			case A3_Erasmo_Stanco_GroupPackage.ERASMUS_PROGRAM:
				sequence_ErasmusProgram(context, (ErasmusProgram) semanticObject); 
				return; 
			case A3_Erasmo_Stanco_GroupPackage.LANGUAGE_REQUIREMENT:
				sequence_LanguageRequirement(context, (LanguageRequirement) semanticObject); 
				return; 
			case A3_Erasmo_Stanco_GroupPackage.LOCATION:
				sequence_Location(context, (Location) semanticObject); 
				return; 
			case A3_Erasmo_Stanco_GroupPackage.RESULTS:
				sequence_Results(context, (Results) semanticObject); 
				return; 
			case A3_Erasmo_Stanco_GroupPackage.SCHOLARSHIP:
				sequence_Scholarship(context, (Scholarship) semanticObject); 
				return; 
			case A3_Erasmo_Stanco_GroupPackage.STEP:
				sequence_Step(context, (Step) semanticObject); 
				return; 
			case A3_Erasmo_Stanco_GroupPackage.UNIVERSITY:
				sequence_University(context, (University) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     AdmissionStructure returns AdmissionStructure
	 *
	 * Constraint:
	 *     (applicationProcess=ApplicationProcess (requierements+=Requirement requierements+=Requirement*)? (results+=Results results+=Results*)?)
	 * </pre>
	 */
	protected void sequence_AdmissionStructure(ISerializationContext context, AdmissionStructure semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ApplicationProcess returns ApplicationProcess
	 *
	 * Constraint:
	 *     (steps+=Step steps+=Step*)?
	 * </pre>
	 */
	protected void sequence_ApplicationProcess(ISerializationContext context, ApplicationProcess semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AssociatePartner returns AssociatePartner
	 *
	 * Constraint:
	 *     (partnerName=STRING type=PartnerType)
	 * </pre>
	 */
	protected void sequence_AssociatePartner(ISerializationContext context, AssociatePartner semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.ASSOCIATE_PARTNER__PARTNER_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.ASSOCIATE_PARTNER__PARTNER_NAME));
			if (transientValues.isValueTransient(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.ASSOCIATE_PARTNER__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.ASSOCIATE_PARTNER__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAssociatePartnerAccess().getPartnerNameSTRINGTerminalRuleCall_0_0(), semanticObject.getPartnerName());
		feeder.accept(grammarAccess.getAssociatePartnerAccess().getTypePartnerTypeEnumRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Course returns Course
	 *
	 * Constraint:
	 *     (courseCode=STRING courseName=STRING faculty=STRING courseCredits=INT)
	 * </pre>
	 */
	protected void sequence_Course(ISerializationContext context, Course semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.COURSE__COURSE_CODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.COURSE__COURSE_CODE));
			if (transientValues.isValueTransient(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.COURSE__COURSE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.COURSE__COURSE_NAME));
			if (transientValues.isValueTransient(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.COURSE__FACULTY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.COURSE__FACULTY));
			if (transientValues.isValueTransient(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.COURSE__COURSE_CREDITS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.COURSE__COURSE_CREDITS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCourseAccess().getCourseCodeSTRINGTerminalRuleCall_3_0(), semanticObject.getCourseCode());
		feeder.accept(grammarAccess.getCourseAccess().getCourseNameSTRINGTerminalRuleCall_6_0(), semanticObject.getCourseName());
		feeder.accept(grammarAccess.getCourseAccess().getFacultySTRINGTerminalRuleCall_9_0(), semanticObject.getFaculty());
		feeder.accept(grammarAccess.getCourseAccess().getCourseCreditsINTTerminalRuleCall_12_0(), semanticObject.getCourseCredits());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Requirement returns DegreeRequirement
	 *     DegreeRequirement returns DegreeRequirement
	 *
	 * Constraint:
	 *     (degreeName=STRING fieldOfStudy=STRING level=DegreeLevel)
	 * </pre>
	 */
	protected void sequence_DegreeRequirement(ISerializationContext context, DegreeRequirement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.DEGREE_REQUIREMENT__DEGREE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.DEGREE_REQUIREMENT__DEGREE_NAME));
			if (transientValues.isValueTransient(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.DEGREE_REQUIREMENT__FIELD_OF_STUDY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.DEGREE_REQUIREMENT__FIELD_OF_STUDY));
			if (transientValues.isValueTransient(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.DEGREE_REQUIREMENT__LEVEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.DEGREE_REQUIREMENT__LEVEL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDegreeRequirementAccess().getDegreeNameSTRINGTerminalRuleCall_3_0(), semanticObject.getDegreeName());
		feeder.accept(grammarAccess.getDegreeRequirementAccess().getFieldOfStudySTRINGTerminalRuleCall_5_0(), semanticObject.getFieldOfStudy());
		feeder.accept(grammarAccess.getDegreeRequirementAccess().getLevelDegreeLevelEnumRuleCall_7_0(), semanticObject.getLevel());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Requirement returns DocumentRequirement
	 *     DocumentRequirement returns DocumentRequirement
	 *
	 * Constraint:
	 *     (documentName=STRING description=STRING)
	 * </pre>
	 */
	protected void sequence_DocumentRequirement(ISerializationContext context, DocumentRequirement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.DOCUMENT_REQUIREMENT__DOCUMENT_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.DOCUMENT_REQUIREMENT__DOCUMENT_NAME));
			if (transientValues.isValueTransient(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.DOCUMENT_REQUIREMENT__DESCRIPTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.DOCUMENT_REQUIREMENT__DESCRIPTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDocumentRequirementAccess().getDocumentNameSTRINGTerminalRuleCall_3_0(), semanticObject.getDocumentName());
		feeder.accept(grammarAccess.getDocumentRequirementAccess().getDescriptionSTRINGTerminalRuleCall_5_0(), semanticObject.getDescription());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ErasmusProgram returns ErasmusProgram
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         totalCredits=INT 
	 *         (universities+=University universities+=University*)? 
	 *         (scholarships+=Scholarship scholarships+=Scholarship*)? 
	 *         (associatePartners+=AssociatePartner associatePartners+=AssociatePartner*)? 
	 *         admissionStructure=AdmissionStructure
	 *     )
	 * </pre>
	 */
	protected void sequence_ErasmusProgram(ISerializationContext context, ErasmusProgram semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Requirement returns LanguageRequirement
	 *     LanguageRequirement returns LanguageRequirement
	 *
	 * Constraint:
	 *     (languageName=STRING level=LanguageLevel)
	 * </pre>
	 */
	protected void sequence_LanguageRequirement(ISerializationContext context, LanguageRequirement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.LANGUAGE_REQUIREMENT__LANGUAGE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.LANGUAGE_REQUIREMENT__LANGUAGE_NAME));
			if (transientValues.isValueTransient(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.LANGUAGE_REQUIREMENT__LEVEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.LANGUAGE_REQUIREMENT__LEVEL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLanguageRequirementAccess().getLanguageNameSTRINGTerminalRuleCall_3_0(), semanticObject.getLanguageName());
		feeder.accept(grammarAccess.getLanguageRequirementAccess().getLevelLanguageLevelEnumRuleCall_5_0(), semanticObject.getLevel());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Location returns Location
	 *
	 * Constraint:
	 *     (countryName=STRING cityName=STRING)
	 * </pre>
	 */
	protected void sequence_Location(ISerializationContext context, Location semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.LOCATION__COUNTRY_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.LOCATION__COUNTRY_NAME));
			if (transientValues.isValueTransient(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.LOCATION__CITY_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.LOCATION__CITY_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLocationAccess().getCountryNameSTRINGTerminalRuleCall_3_0(), semanticObject.getCountryName());
		feeder.accept(grammarAccess.getLocationAccess().getCityNameSTRINGTerminalRuleCall_6_0(), semanticObject.getCityName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Results returns Results
	 *
	 * Constraint:
	 *     (year=INT totalAdmitted=INT scholarshipsAwarded=INT (admittedStudents+=STRING admittedStudents+=STRING*)?)
	 * </pre>
	 */
	protected void sequence_Results(ISerializationContext context, Results semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Scholarship returns Scholarship
	 *
	 * Constraint:
	 *     (type=ScholarshipType tuitionFee=INT travelGrant=INT allowance=INT)
	 * </pre>
	 */
	protected void sequence_Scholarship(ISerializationContext context, Scholarship semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.SCHOLARSHIP__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.SCHOLARSHIP__TYPE));
			if (transientValues.isValueTransient(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.SCHOLARSHIP__TUITION_FEE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.SCHOLARSHIP__TUITION_FEE));
			if (transientValues.isValueTransient(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.SCHOLARSHIP__TRAVEL_GRANT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.SCHOLARSHIP__TRAVEL_GRANT));
			if (transientValues.isValueTransient(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.SCHOLARSHIP__ALLOWANCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.SCHOLARSHIP__ALLOWANCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getScholarshipAccess().getTypeScholarshipTypeEnumRuleCall_0_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getScholarshipAccess().getTuitionFeeINTTerminalRuleCall_3_0(), semanticObject.getTuitionFee());
		feeder.accept(grammarAccess.getScholarshipAccess().getTravelGrantINTTerminalRuleCall_5_0(), semanticObject.getTravelGrant());
		feeder.accept(grammarAccess.getScholarshipAccess().getAllowanceINTTerminalRuleCall_7_0(), semanticObject.getAllowance());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Step returns Step
	 *
	 * Constraint:
	 *     (stepName=STRING stepDescription=STRING startDate=EDATE endDate=EDATE)
	 * </pre>
	 */
	protected void sequence_Step(ISerializationContext context, Step semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.STEP__STEP_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.STEP__STEP_NAME));
			if (transientValues.isValueTransient(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.STEP__STEP_DESCRIPTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.STEP__STEP_DESCRIPTION));
			if (transientValues.isValueTransient(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.STEP__START_DATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.STEP__START_DATE));
			if (transientValues.isValueTransient(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.STEP__END_DATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, A3_Erasmo_Stanco_GroupPackage.Literals.STEP__END_DATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStepAccess().getStepNameSTRINGTerminalRuleCall_1_0(), semanticObject.getStepName());
		feeder.accept(grammarAccess.getStepAccess().getStepDescriptionSTRINGTerminalRuleCall_4_0(), semanticObject.getStepDescription());
		feeder.accept(grammarAccess.getStepAccess().getStartDateEDATETerminalRuleCall_6_0(), semanticObject.getStartDate());
		feeder.accept(grammarAccess.getStepAccess().getEndDateEDATETerminalRuleCall_8_0(), semanticObject.getEndDate());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     University returns University
	 *
	 * Constraint:
	 *     (universityName=STRING location=Location credits=INT (courses+=Course courses+=Course*)?)
	 * </pre>
	 */
	protected void sequence_University(ISerializationContext context, University semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
