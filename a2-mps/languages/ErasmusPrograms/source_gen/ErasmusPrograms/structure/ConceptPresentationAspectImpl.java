package ErasmusPrograms.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AdmissionStructure;
  private ConceptPresentation props_ApplicationProcess;
  private ConceptPresentation props_AssociatePartner;
  private ConceptPresentation props_Course;
  private ConceptPresentation props_DegreeRequirement;
  private ConceptPresentation props_DocumentRequirement;
  private ConceptPresentation props_ErasmusProgram;
  private ConceptPresentation props_LanguageRequirement;
  private ConceptPresentation props_Location;
  private ConceptPresentation props_Requirement;
  private ConceptPresentation props_Results;
  private ConceptPresentation props_Scholarship;
  private ConceptPresentation props_Step;
  private ConceptPresentation props_University;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AdmissionStructure:
        if (props_AdmissionStructure == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("admission");
          props_AdmissionStructure = cpb.create();
        }
        return props_AdmissionStructure;
      case LanguageConceptSwitch.ApplicationProcess:
        if (props_ApplicationProcess == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("application process");
          props_ApplicationProcess = cpb.create();
        }
        return props_ApplicationProcess;
      case LanguageConceptSwitch.AssociatePartner:
        if (props_AssociatePartner == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("partner");
          props_AssociatePartner = cpb.create();
        }
        return props_AssociatePartner;
      case LanguageConceptSwitch.Course:
        if (props_Course == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Course = cpb.create();
        }
        return props_Course;
      case LanguageConceptSwitch.DegreeRequirement:
        if (props_DegreeRequirement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DegreeRequirement = cpb.create();
        }
        return props_DegreeRequirement;
      case LanguageConceptSwitch.DocumentRequirement:
        if (props_DocumentRequirement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DocumentRequirement = cpb.create();
        }
        return props_DocumentRequirement;
      case LanguageConceptSwitch.ErasmusProgram:
        if (props_ErasmusProgram == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ErasmusProgram = cpb.create();
        }
        return props_ErasmusProgram;
      case LanguageConceptSwitch.LanguageRequirement:
        if (props_LanguageRequirement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_LanguageRequirement = cpb.create();
        }
        return props_LanguageRequirement;
      case LanguageConceptSwitch.Location:
        if (props_Location == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("location");
          props_Location = cpb.create();
        }
        return props_Location;
      case LanguageConceptSwitch.Requirement:
        if (props_Requirement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Requirement = cpb.create();
        }
        return props_Requirement;
      case LanguageConceptSwitch.Results:
        if (props_Results == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("results");
          props_Results = cpb.create();
        }
        return props_Results;
      case LanguageConceptSwitch.Scholarship:
        if (props_Scholarship == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Scholarship = cpb.create();
        }
        return props_Scholarship;
      case LanguageConceptSwitch.Step:
        if (props_Step == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Step = cpb.create();
        }
        return props_Step;
      case LanguageConceptSwitch.University:
        if (props_University == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_University = cpb.create();
        }
        return props_University;
    }
    return null;
  }
}
