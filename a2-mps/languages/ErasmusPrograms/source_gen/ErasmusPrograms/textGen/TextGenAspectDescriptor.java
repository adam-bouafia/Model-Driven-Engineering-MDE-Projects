package ErasmusPrograms.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenAspectBase;
import ErasmusPrograms.structure.LanguageConceptSwitch;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.text.rt.TextGenDescriptor;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.text.rt.TextGenModelOutline;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;

public class TextGenAspectDescriptor extends TextGenAspectBase {
  private final LanguageConceptSwitch myIndex = new LanguageConceptSwitch();

  public TextGenAspectDescriptor() {
  }

  @Nullable
  @Override
  public TextGenDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    switch (myIndex.index(concept)) {
      case LanguageConceptSwitch.AdmissionStructure:
        return new AdmissionStructure_TextGen();
      case LanguageConceptSwitch.ApplicationProcess:
        return new ApplicationProcess_TextGen();
      case LanguageConceptSwitch.AssociatePartner:
        return new AssociatePartner_TextGen();
      case LanguageConceptSwitch.Course:
        return new Course_TextGen();
      case LanguageConceptSwitch.DegreeRequirement:
        return new DegreeRequirement_TextGen();
      case LanguageConceptSwitch.DocumentRequirement:
        return new DocumentRequirement_TextGen();
      case LanguageConceptSwitch.ErasmusProgram:
        return new ErasmusProgram_TextGen();
      case LanguageConceptSwitch.LanguageRequirement:
        return new LanguageRequirement_TextGen();
      case LanguageConceptSwitch.Location:
        return new Location_TextGen();
      case LanguageConceptSwitch.Requirement:
        return new Requirement_TextGen();
      case LanguageConceptSwitch.Results:
        return new Results_TextGen();
      case LanguageConceptSwitch.Scholarship:
        return new Scholarship_TextGen();
      case LanguageConceptSwitch.Step:
        return new Step_TextGen();
      case LanguageConceptSwitch.University:
        return new University_TextGen();
    }
    return null;
  }

  @Override
  public void breakdownToUnits(@NotNull TextGenModelOutline outline) {
    for (SNode root : outline.getModel().getRootNodes()) {
      if (root.getConcept().equals(CONCEPTS.ErasmusProgram$Le)) {
        String fname = getFileName_ErasmusProgram(root);
        String ext = getFileExtension_ErasmusProgram(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), root);
        continue;
      }
    }
  }
  private static String getFileName_ErasmusProgram(SNode node) {
    return SPropertyOperations.getString(node, PROPS.name$MnvL);
  }
  private static String getFileExtension_ErasmusProgram(SNode node) {
    return "sql";
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept ErasmusProgram$Le = MetaAdapterFactory.getConcept(0x45d743938b794afaL, 0x9cc9d68d79ce89e1L, 0x9d77ea4d04f30c3L, "ErasmusPrograms.structure.ErasmusProgram");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
